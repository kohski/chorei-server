# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2.1
orbs:
  codecov: codecov/codecov@1.0.5
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.5.1-node-browsers
        environment:
          BUNDLER_VERSION: 2.0.1
          PGHOST: 127.0.0.1
          PGUSER: myapp-test
          RAILS_ENV: test

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
      - image: circleci/postgres:11.3-alpine
        environment:
          POSTGRES_USER: myapp-test
          POSTGRES_DB: myapp-test
          POSTGRES_PASSWORD: ""

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: setup bundler
          command: |
            sudo gem update --system
            sudo gem uninstall bundler
            sudo rm /usr/local/bin/bundle
            sudo rm /usr/local/bin/bundler
            sudo gem install bundler
      
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - run: sudo apt install -y postgresql-client || true

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"

            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
      - store_artifacts:
          path: coverage

      - codecov/upload:
          file: ./coverage/.resultset.json

      # Deploy
      # - run:
      #     name: Install rsync
      #     command: |
      #       sudo apt-get update -y
      #       sudo apt-get -y install rsync

      # - add_ssh_keys:
      #     fingerprints:
      #       - ${FINGERPRINT}

      # - run:
      #     name: Add ssh-agent
      #     command: |
      #       ssh-agent -s > ~/.ssh_agent_conf
      #       source ~/.ssh_agent_conf
      #       for _k in $(ls ${HOME}/.ssh/id_*); do
      #         ssh-add ${_k} || true
      #       done

      # - deploy:
      #     name: Deploy via Capistrano
      #     command: |
      #       if [ "${CIRCLE_BRANCH}" != "master" ]; then
      #         exit 0
      #       fi
            
      #       bundle exec cap production deploy
      - run:
          name: Deploy to AWS if tests pass and branch is Master
          command: bundle exec cap production deploy